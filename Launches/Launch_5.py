#!/usr/bin/env pybricks-micropython
import Header
import threading
from threading import Thread
from pybricks.robotics import Stop

#Launches.
def Mission_1():
    Header.ev3.screen.clear()
    Header.ev3.screen.print("Mission 5")
    Header.interrupt_flag = False
    interrupt_thread = Thread(target=Header.check_interrupt)
    interrupt_thread.start()
    Header.reset_all()
    Header.PID(-600, 0, 650, -5, -0.1, -10, 10, DF=2)
    Header.Left_Motor_M.run_target(1000, 850, then=Stop.HOLD, wait=True)
    Header.PID(-100, 0, 150, -5, -0.1, -10, 10, DF=2)
    Header.PID_TIME(-100, 0, 2000, -5, -0.1, -10, 10)
    Header.Left_Motor_M.run_target(1000, 400, then=Stop.HOLD)
    Header.PID(100, 0, 120, -5, -0.1, -10, 10)
    Header.P_Gyro_Turn(34, 7, 7)
    Header.Gyro_Check(34)
    Header.ev3.screen.print(Header.Gyro_Sensor.angle())
    Header.PID(-700, 35, 100, -5, -0.1, -10, 30, doMcheck=False)
    Header.Left_Motor_M.run_target(1000, 0, then=Stop.HOLD, wait=False)
    Header.PID(50, 37, 205, -5, -0.1, -10, 15)
    # Header.Motor_Check(180)
    Header.Right_Motor_M.run_target(-10000, 3700, then=Stop.HOLD, wait=False)
    Header.P_Gyro_Turn(-43, 7, 7)
    Header.wait(1500)
    Header.PID(80, -43, 85, -5, -0.1, -10, 15)
    Header.Right_Motor_M.run_target(-10000, 1000, then=Stop.HOLD)
    Header.PID(-300, -43, 160, -5, -0.1, -10, 15)
    Header.P_Gyro_Turn(-65, 7, 7)
    Header.PID(-300, -65, 420, -5, -0.1, -10, 15)
    Header.P_Gyro_Turn(-210, 7, 7)
    Header.Gyro_Check(-210)
    Header.Right_Motor_M.run_target(10000, 2500, then=Stop.HOLD)
    Header.PID(200, -210, 130, -5, -0.1, -10, 15)
    Header.Right_Motor_M.run_target(-10000, 0, then=Stop.HOLD, wait=False)
    # Header.PID(-200, -180, 35, -5, -0.1, -10, 15)
    Header.P_Gyro_Turn(-180, 7, 7)
    Header.Robot_Break()


def Mission():
    Header.ev3.screen.clear()
    Header.ev3.screen.print("Mission 5")
    Header.interrupt_flag = False
    interrupt_thread = Thread(target=Header.check_interrupt)
    interrupt_thread.start()
    Header.reset_all()
    Header.PID(-600, 0, 650, -5, -0.1, -10, 10, DF=2)
    Header.Left_Motor_M.run_target(1000, 850, then=Stop.HOLD, wait=True)
    Header.PID(-100, 0, 150, -5, -0.1, -10, 10, DF=2)
    Header.PID_TIME(-100, 0, 2000, -5, -0.1, -10, 10)
    Header.Left_Motor_M.run_target(1000, 400, then=Stop.HOLD)
    Header.reset_all()
    Header.PID(100, 0, 80, -5, -0.1, -10, 10)
    Header.Motor_Check(80)
    Header.P_Gyro_Turn(41, 4, 4, min_speed=100)
    Header.Gyro_Check(41)
    Header.ev3.screen.print(Header.Gyro_Sensor.angle())
    Header.wait(500)
    Header.PID_TIME(-500, 41, 1000, -5, -0.1, -10, 3)
    Header.PID(50, Header.Gyro_Sensor.angle(), 190, -5, -0.1, -10, 15)
    Header.Left_Motor_M.run_target(1000, -400, then=Stop.HOLD, wait=False)
    Header.Right_Motor_M.run_target(10000, -2700, then=Stop.HOLD, wait=False)
    Header.P_Gyro_Turn(-70, 7, 7)
    Header.PID_COLOR_R(-500, -70, 82, 2, -5, -0.1, -10, 15)
    Header.PID(-100, -70, 30, -5, -0.1, -10, 5)
    Header.Right_Motor_M.run_target(10000, 0, then=Stop.HOLD)
    Header.Gyro_Turn(-155, 500, -150)
    Header.wait(500)
    Header.Gyro_Check(-155)